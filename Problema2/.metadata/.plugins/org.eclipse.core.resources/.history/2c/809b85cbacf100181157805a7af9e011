#include "io.h"
#include "system.h"
#include <unistd.h>
#include <stdio.h>
#include <time.h>
#include <string.h>
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_uart_regs.h"
#include "altera_avalon_jtag_uart_regs.h"

#define TRUE 1
#define FALSE 0
#define MAX_OPTIONS_NUMBER 5
#define RETURN_HOME 0x01
#define CLEAR_DISPLAY 0x02
#define MQTT_MAX_FIXED_HEADER_SIZE 3

#define WIFI_MODE "AT+CWMODE=3\r\n"
#define WIFI_CONNECT "AT+CWJAP=\"WLessLEDS\", \"HelloWorldMP31\"\r\n"

#define TCP_CONNECT "AT+CIPSTART=\"TCP\",\"192.168.1.103\",1883\r\n"
#define TCP_DISCONNECT "AT+CIPCLOSE\r\n"

#define MQTT_CONNECT_SIZE "AT+CIPSEND=20\r\n"
#define MQTT_CONNECT "\x10\x12\x00\x04\aMQTT\x04\x02\x00\x14\x00\x06\aNios 2\r\n"

#define MESSAGE_SIZE "AT+CIPSEND=21\r\n"
#define MESSAGE_0 "\x30\x13\x00\x06\aPBL 02Mensagem 01"
#define MESSAGE_1 "\x30\x13\x00\x06\aPBL 02Mensagem 02"
#define MESSAGE_2 "\x30\x13\x00\x06\aPBL 02Mensagem 03"
#define MESSAGE_3 "\x30\x13\x00\x06\aPBL 02Mensagem 04"
#define MESSAGE_4 "\x30\x13\x00\x06\aPBL 02Mensagem 05"

#define MQTT_DISCONNECT_SIZE "AT+CIPSEND=2\r\n"
#define MQTT_DISCONNECT "\xe0\x00\r\n"

int choosed = FALSE;

/* LCD CONTROL */
int nextOption (int currentOption);
int previousOption (int currentOption);
void showOption (int currentOption);
void enterOption (int currentOption);
void exitOption (int currentOption);
void showLed(int currentOption);
void writeWord(char word[]);
void hideAllLeds();
void initializeDisplay();

/* ESP CONTROL */

void startConnection(int code);
void connectToRouter();
void queryNetworks();
void createClient();
void sendCommand();
void connectMQTT();
void sendData(int code);
void closeMQTT();
void closeConnection();

/* UTIL */
void printJTAG(char* data);
void printInt(int data);
void delay(int ms);

int main()
{
	unsigned int buttonUp = 0, buttonDown = 0, buttonExit = 0, buttonEnter = 0 ;
	int currentOption = 0;

	initializeDisplay();
	usleep(2000);
	printf("Inicializando");

	while (TRUE) {
		buttonUp = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_UP_BASE);
		buttonDown = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_DOWN_BASE);
		buttonEnter = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_ENTER_BASE);
		buttonExit = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_EXIT_BASE);

		if (buttonUp && !choosed) {
			currentOption = previousOption(currentOption);
			showOption(currentOption);
			usleep(100000);
		} else if (buttonDown && !choosed) {
			currentOption = nextOption(currentOption);
			showOption(currentOption);
			usleep(100000);
		} else if (buttonEnter && !choosed) {
			enterOption(currentOption);
			startConnection(currentOption); // Calls ESP Connection
			usleep(100000);
		} else if (buttonExit) {
			exitOption(currentOption);
			usleep(100000);
		}

		usleep(500);
	}
	return 0;
}

void initializeDisplay () {
	usleep(15000);
	IOWR(LCD_OUTPUT_BASE, 0, 0x30);
	usleep(4100);
	IOWR(LCD_OUTPUT_BASE, 0, 0x30);
	usleep(100);
	IOWR(LCD_OUTPUT_BASE, 0, 0x30);
	usleep(5000);
	IOWR(LCD_OUTPUT_BASE, 0, 0x39);
	usleep(100);
	IOWR(LCD_OUTPUT_BASE, 0, 0x14);
	usleep(100);
	IOWR(LCD_OUTPUT_BASE, 0, 0x56);
	usleep(100);
	IOWR(LCD_OUTPUT_BASE, 0, 0x6D);
	usleep(100);
	IOWR(LCD_OUTPUT_BASE, 0, 0x70);
	usleep(2000);
	IOWR(LCD_OUTPUT_BASE, 0, 0x0C);
	usleep(2000);
	IOWR(LCD_OUTPUT_BASE, 0, 0x06);
	usleep(2000);
	IOWR(LCD_OUTPUT_BASE, 0, 0x01);
	usleep(2000);
	hideAllLeds();
	showOption(0);
}

int nextOption (int currentOption) {
	int option = 0;

	if (currentOption == MAX_OPTIONS_NUMBER - 1) {
		option =  0;
	} else {
		option =  currentOption + 1;
	}
	return option;
}

int previousOption (int currentOption) {
	int option = 0;

	if (currentOption == 0) {
		option =  MAX_OPTIONS_NUMBER - 1;
	} else {
		option =  currentOption - 1;
	}
	return option;
}

void showOption (int currentOption) {
	char *a[5];
	a[0] = "Opcao 1";
	a[1] = "Opcao 2";
	a[2] = "Opcao 3";
	a[3] = "Opcao 4";
	a[4] = "Opcao 5";

	writeWord(a[currentOption]);
	usleep(500);
}

void sendCommand (char* command) {
	char receive;
	long miss = 0;
//	int retries = 0;
	alt_putstr(command);

	while (1) {

		if(IORD_ALTERA_AVALON_UART_STATUS(UART_MAIN_BASE) & (1<<7)) {
			receive = IORD_ALTERA_AVALON_UART_RXDATA(UART_MAIN_BASE);
//			miss = 0;

			printJTAG(receive);

			if (receive == 'K') {
				return;
			}
		}
//		else { miss++; }

//		if (miss >= 100000) return;
//		if (miss >= 5000000 && retries <= 3) {
//			retries++;
//			printJTAG('\n');
//			printJTAG('T');
//			printJTAG('r');
//			printJTAG('y');
//			printJTAG('i');
//			printJTAG('n');
//			printJTAG('g');
//			printJTAG('\n');
//			miss = 0;
//			alt_putstr(command);
//		} else if (retries > 3) {
//			return;
//		}
	}
}

void startConnection (int code) {
	alt_putstr("AT+RST\r\n");
	printJTAG('$');
	usleep(500000);
	printJTAG('@');
	sendCommand("AT+CWMODE=3\r\n");
	connectToRouter();
	sendData(code);
	closeMQTT();
	closeConnection();
}

void connectToRouter () {
	sendCommand("AT+CWJAP=\"WLessLEDS\",\"HelloWorldMP31\"\r\n");
}

void queryNetworks () {
//	sendCommand("AT+CIFSR\r\n");
}

void createClient () {
	sendCommand("AT+CIPSTART=\"TCP\",\"192.168.1.103\",1883\r\n");
}

void connectMQTT () {
	createClient();
	usleep(500000);
	sendCommand("AT+CIPSEND=10\r\n");
	char receive;
	char connectMessage[] = {
			  0x10 // Connect
			, 0x12// Remaining Length
			, 0x00 // 0
			, 0x04 // 6
			, 0x4d // M
			, 0x51 // Q
			, 0x54 // I
			, 0x54 // S
			, 0x04 // D
			, 0x02 // P
			, 0x00 // Protocol version = 3
			, 0x14 // Clean session only
			, 0x00 // Keepalive MSB
			, 0x05 // Keepaliave LSB = 60
			, 0x4e // String length MSB
			, 0x69 // String length LSB = 2
			, 0x6f // M
			, 0x73 // P .. Let's say client ID = MP
			, 0x20
			, 0x32
	};
	printInt(10);
	while (1) {

		if(IORD_ALTERA_AVALON_UART_STATUS(UART_MAIN_BASE) & (1<<7)) {
			receive = IORD_ALTERA_AVALON_UART_RXDATA(UART_MAIN_BASE);
			printJTAG(receive);

			if (receive == '>') {
				alt_putstr(connectMessage);
				while (1) {

					if(IORD_ALTERA_AVALON_UART_STATUS(UART_MAIN_BASE) & (1<<7)) {
						receive = IORD_ALTERA_AVALON_UART_RXDATA(UART_MAIN_BASE);

						printJTAG(receive);

						if(receive == 'K') {
							return;
						}
					}
				}
			}
		}
	}
//	alt_putstr(MQTT_CONNECT);

}
void sendData (int code) {
	connectMQTT();
	sendCommand(MESSAGE_SIZE);

	if (code == 0) {
		alt_putstr(MESSAGE_0);
	} else if (code == 1) {
		alt_putstr(MESSAGE_1);
	} else if (code == 2) {
		alt_putstr(MESSAGE_2);
	}	else if (code == 3) {
		alt_putstr(MESSAGE_3);
	} else if (code == 4) {
		alt_putstr(MESSAGE_4);
	}

	closeConnection();

}

void closeMQTT () {
	createClient();
	sendCommand(MQTT_DISCONNECT_SIZE);
	alt_putstr(MQTT_DISCONNECT);
}
void closeConnection () {
	sendCommand(TCP_DISCONNECT);
}


void enterOption (int currentOption) {
	char *a[5];
	a[0] = "Escolheu 1";
	a[1] = "Escolheu 2";
	a[2] = "Escolheu 3";
	a[3] = "Escolheu 4";
	a[4] = "Escolheu 5";
	choosed = TRUE;

	writeWord(a[currentOption]);
	showLed(currentOption);
	usleep(500);
}

void writeWord(char word[]) {
	IOWR(LCD_OUTPUT_BASE, 0, CLEAR_DISPLAY);
	usleep(2000);
	IOWR(LCD_OUTPUT_BASE, 0, RETURN_HOME);
	usleep(2000);

	int i = 0;

	for(i=0; i < strlen(word); i++){
		IOWR(LCD_OUTPUT_BASE, 2, word[i]);
		usleep(1000);
	}
	usleep(500);
}

void showLed (int currentOption) {
	hideAllLeds();

	switch(currentOption) {
	case 0: //RED
		IOWR(LED_R_BASE, 0, 1);
		IOWR(LED_G_BASE, 0, 0);
		IOWR(LED_B_BASE, 0, 0);
		usleep(100000);
		break;
	case 1: // GREEN
		IOWR(LED_R_BASE, 0, 0);
		IOWR(LED_G_BASE, 0, 1);
		IOWR(LED_B_BASE, 0, 0);
		usleep(100000);
		break;
	case 2: // BLUE
		IOWR(LED_R_BASE, 0, 0);
		IOWR(LED_G_BASE, 0, 0);
		IOWR(LED_B_BASE, 0, 1);
		usleep(100000);
		break;
	case 3: // MAGENTA
		IOWR(LED_R_BASE, 0, 1);
		IOWR(LED_G_BASE, 0, 0);
		IOWR(LED_B_BASE, 0, 1);
		usleep(100000);
		break;
	case 4: // YELLOW
		IOWR(LED_R_BASE, 0, 1);
		IOWR(LED_G_BASE, 0, 1);
		IOWR(LED_B_BASE, 0, 0);
		usleep(100000);
		break;
	}
}

void printJTAG (char* data) {
	IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE, data);
}

void printInt (int data) {
	char d[2];
	sprintf(d, "%d", data);
	int i = 0;
	int size = strlen(d);

	for (i = 0; i < size; i++) {
		IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE, d[i]);
	}

}
void hideAllLeds () {
	IOWR(LED_R_BASE, 0, 1);
	IOWR(LED_G_BASE, 0, 1);
	IOWR(LED_B_BASE, 0, 1);
}

void exitOption (int currentOption) {
	hideAllLeds();
	showOption(currentOption);
	choosed = FALSE;
	usleep(500);
}

void delay (int ms) {
	volatile int i = 0;
	while (i < ms*1000000){
		i++;
	}
}
